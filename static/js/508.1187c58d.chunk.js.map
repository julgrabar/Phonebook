{"version":3,"file":"static/js/508.1187c58d.chunk.js","mappings":"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","sources":["components/Contact form/ContactForm.styled.ts","redux/contacts/contactsSelectors.ts","components/Contact form/NewContactForm.tsx","components/Filter/Filter.tsx","components/Loader/Loader.stayled.ts","components/Contact form/EditContactForm.tsx","components/Contact item/ContactsItem.tsx","components/Contact list/ContactsList.styled.ts","components/Contact list/ContactList.tsx","views/ContactsView.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  margin-top: 32px;\n  border: solid 2px lightgray;\n  border-radius: 15px;\n  width: 300px;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  padding: 20px;\n\n  label {\n    text-align: center;\n  }\n\n  button {\n    width: 100px;\n    padding: 5px 10px;\n    border: none;\n    border-radius: 15px;\n    background-color: #ffffff;\n    cursor: pointer;\n    margin-top: 15px;\n  }\n`;\n\nexport const EditForm = styled(Form)`\n  position: relative;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  input {\n    width: 100%;\n  }\n\n  .submit-btn {\n    width: 100px;\n    padding: 5px 10px;\n    border: none;\n    border-radius: 15px;\n    background-color: #ffffff;\n    cursor: pointer;\n    margin-top: 15px;\n    color: black;\n    margin: 15px auto 0 auto;\n  }\n  .close-btn {\n    position: absolute;\n    top: 5px;\n    right: 5px;\n    padding: 0;\n  }\n`;\n","import { IState} from 'types/types';\n\nexport const getContacts = (state: IState) => state.contacts.items;\nexport const getIsLoading = (state: IState) => state.contacts.isLoading;\nexport const getFilterValue = (state: IState) => state.contacts.filter;","import { Formik, Field, FormikHelpers } from 'formik';\nimport { StyledForm } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContactRequest } from 'redux/contacts/contactsOperations';\nimport { getContacts } from 'redux/contacts/contactsSelectors';\nimport React from 'react';\nimport { AppDispatch } from 'redux/store';\nimport { IContact, IContactFormData } from 'types/types';\n\n\nexport const NewContactForm = () => {\n  const contacts: IContact[] = useSelector(getContacts);\n  const dispatch = useDispatch<AppDispatch>();\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const handleSubmit = (values:IContactFormData, { resetForm }:FormikHelpers<IContactFormData>) => {\n    addNewContact(values);\n    resetForm();\n  };\n\n  const addNewContact = ({ name, number }:IContactFormData) => {\n    if (\n      contacts.map(item => item.name.toLowerCase()).includes(name.toLowerCase())\n    ) {\n      alert(`${name} is Already in contacts`);\n      return;\n    }\n\n    const contact = {\n      name,\n      number,\n    };\n\n    dispatch(addContactRequest(contact));\n  };\n\n  return (\n    <Formik onSubmit={handleSubmit} initialValues={initialValues}>\n      <StyledForm>\n        <label>\n          <p>Name</p>\n          <Field\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n\n        <label>\n          <p>Number</p>\n          <Field\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/contactsSlice';\nimport { getFilterValue } from 'redux/contacts/contactsSelectors';\nimport React, { ChangeEvent } from 'react';\n\nexport const Filter = () => {\n  const filterValue = useSelector(getFilterValue);\n  const dispatch = useDispatch();\n\n  const onFilterInput = (e: ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterContacts(e.currentTarget.value));\n  };\n\n  return (\n    <>\n      <p>Find contacts by name:</p>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={filterValue}\n        onChange={onFilterInput}\n        className=\"filter\"\n      />\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Loader = styled.div<{ margin?: string }>`\n  margin: ${props => props.margin ?? '0 auto'};\n  font-size: 10px;\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  background: #ffffff;\n  background: -moz-linear-gradient(\n    left,\n    #ffffff 10%,\n    rgba(255, 255, 255, 0) 42%\n  );\n  background: -webkit-linear-gradient(\n    left,\n    #ffffff 10%,\n    rgba(255, 255, 255, 0) 42%\n  );\n  background: -o-linear-gradient(left, #ffffff 10%, rgba(255, 255, 255, 0) 42%);\n  background: -ms-linear-gradient(\n    left,\n    #ffffff 10%,\n    rgba(255, 255, 255, 0) 42%\n  );\n  background: linear-gradient(\n    to right,\n    #ffffff 10%,\n    rgba(255, 255, 255, 0) 42%\n  );\n  position: relative;\n  -webkit-animation: load3 1.4s infinite linear;\n  animation: load3 1.4s infinite linear;\n  -webkit-transform: translateZ(0);\n  -ms-transform: translateZ(0);\n  transform: translateZ(0);\n\n  :before {\n    width: 50%;\n    height: 50%;\n    background: #ffffff;\n    border-radius: 100% 0 0 0;\n    position: absolute;\n    top: 0;\n    left: 0;\n    content: '';\n  }\n  :after {\n    background: #000066;\n    width: 75%;\n    height: 75%;\n    border-radius: 50%;\n    content: '';\n    margin: auto;\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n  }\n  @-webkit-keyframes load3 {\n    0% {\n      -webkit-transform: rotate(0deg);\n      transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }\n  @keyframes load3 {\n    0% {\n      -webkit-transform: rotate(0deg);\n      transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }\n`;\n","import { Formik, Field} from 'formik';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { changeContactRequest } from 'redux/contacts/contactsOperations';\nimport { AppDispatch } from 'redux/store';\nimport { EditForm } from './ContactForm.styled';\nimport { IContactFormData } from 'types/types';\n\ninterface IProps {\n  id: string,\n  name: string,\n  number: string,\n  setEdit: (isEdit: boolean)=> void\n}\n\n\nexport const EditContactForm = ({ id, name, number, setEdit }: IProps) => {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const initialValues: IContactFormData = {\n    name,\n    number,\n  };\n\n  const handleSubmit = ({ name, number }: IContactFormData) => {\n    const contact = {\n      id,\n      name,\n      number,\n    };\n\n    dispatch(changeContactRequest(contact));\n    setEdit(false);\n  };\n\n\n  return (\n    <Formik onSubmit={handleSubmit} initialValues={initialValues}>\n      <EditForm>\n        <label>\n          <p>Name</p>\n          <Field\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n\n        <label>\n          <p>Number</p>\n          <Field\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <button type=\"submit\" className=\"submit-btn\">\n          Edit contact\n        </button>\n        <button\n          type=\"button\"\n          className=\"close-btn\"\n          onClick={() => setEdit(false)}\n        >\n          X\n        </button>\n      </EditForm>\n    </Formik>\n  );\n};\n","import { EditContactForm } from 'components/Contact form/EditContactForm';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContactRequest } from 'redux/contacts/contactsOperations';\nimport { AppDispatch } from 'redux/store';\nimport { IContact} from 'types/types';\n\nexport const ContactsItem = ({ id, name, number }:IContact) => {\n  const [edit, setEdit] = useState(false);\n  const dispatch = useDispatch<AppDispatch>();\n\n  return (\n    <li>\n      {edit ? (\n        <EditContactForm\n          id={id}\n          name={name}\n          number={number}\n          setEdit={setEdit}\n        />\n      ) : (\n        <>\n          <span>\n            {name}: {number}\n          </span>\n          <button\n            type=\"button\"\n            className=\"edit-btn\"\n            onClick={() => setEdit(true)}\n          >\n            <span className=\"material-icons\">edit</span>\n          </button>\n          <button\n            type=\"button\"\n            className=\"delete-btn\"\n            onClick={() => dispatch(deleteContactRequest(id))}\n          >\n            <span className=\"material-icons\">delete</span>\n          </button>\n        </>\n      )}\n    </li>\n  );\n};\n\nContactsItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style: none;\n  padding: 0;\n  width: 100%;\n  li {\n    display: flex;\n    align-items: center;\n    border: solid white 1px;\n    padding: 20px;\n    border-radius: 10px;\n  }\n\n  li:not(:last-child) {\n    margin-bottom: 10px;\n  }\n\n  button {\n    background-color: #fff;\n    border-radius: 20px;\n    border: none;\n    background-color: transparent;\n    color: white;\n    cursor: pointer;\n  }\n\n  .edit-btn {\n    margin-left: auto;\n  }\n`;\n","import { ContactsItem } from 'components/Contact item/ContactsItem';\nimport React from 'react';\nimport { List } from './ContactsList.styled';\nimport { IContact } from 'types/types';\n\ninterface IProps {\n  contacts: IContact[]\n}\n\nexport const ContactList = ({ contacts }: IProps) => {\n  return (\n    <List>\n      {contacts.map(({ id, name, number }) => (\n        <ContactsItem key={id} id={id} name={name} number={number} />\n      ))}\n    </List>\n  );\n};\n","import { NewContactForm } from 'components/Contact form/NewContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { Container } from 'components/Global';\nimport { Loader } from 'components/Loader/Loader.stayled';\nimport React from 'react';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContactsNames } from 'redux/contacts/contactsOperations';\nimport {\n  getFilterValue,\n  getContacts,\n  getIsLoading,\n} from 'redux/contacts/contactsSelectors';\nimport { AppDispatch } from 'redux/store';\nimport { ContactList } from '../components/Contact list/ContactList';\nimport { IContact } from 'types/types';\n\nconst ContactsPage = () => {\n  const contacts: IContact[] = useSelector(getContacts);\n  const filterValue = useSelector(getFilterValue);\n  const isLoading = useSelector(getIsLoading);\n  const dispatch = useDispatch<AppDispatch>();\n\n  useEffect(() => {\n    dispatch(fetchContactsNames());\n  }, [dispatch]);\n\n  const findPhones = () => {\n    const normalizedValue = filterValue.toLowerCase();\n    const filteredArray = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedValue)\n    );\n    return filteredArray;\n  };\n\n  return (\n    <Container>\n      <NewContactForm />\n\n      {contacts && contacts.length > 0 && (\n        <>\n          <Filter />\n          <ContactList contacts={findPhones()} />\n        </>\n      )}\n      {isLoading && <Loader />}\n    </Container>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["StyledForm","styled","Form","EditForm","getContacts","state","contacts","items","getIsLoading","isLoading","getFilterValue","filter","NewContactForm","useSelector","dispatch","useDispatch","addNewContact","name","number","map","item","toLowerCase","includes","alert","contact","addContactRequest","onSubmit","values","resetForm","initialValues","type","pattern","title","required","Filter","filterValue","value","onChange","e","filterContacts","currentTarget","className","Loader","props","margin","EditContactForm","id","setEdit","changeContactRequest","onClick","ContactsItem","useState","edit","deleteContactRequest","List","ContactList","useEffect","fetchContactsNames","length","normalizedValue","findPhones"],"sourceRoot":""}